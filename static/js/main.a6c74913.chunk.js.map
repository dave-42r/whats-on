{"version":3,"sources":["HomePageGrid.tsx","ShowPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomePageGrid","defaultProps","className","isDraggable","ResponsiveGridLayout","WidthProvider","Responsive","layout","p","_","map","sampleData","item","i","y","result","Math","ceil","random","x","floor","w","h","toString","generateLayout","range","length","to","id","alt","show","name","src","image","medium","rating","average","generateDOM","ShowPageDetail","showPageDetailProps","Title","OverviewPictureSrc","ShowInfo","StreamedOn","Schedule","Status","Genres","join","Starring","actor","ProfileLink","ActorName","CharactorName","ShowPage","params","useParams","thisMorningData","ExampleData","find","exampleData","parseInt","showId","Description","summary","Rating","genres","schedule","days","status","network","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c74913.chunk.js","sourcesContent":["import { defaultMaxListeners } from 'events';\r\nimport _ from \"lodash\";\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport sampleData from './exampleData.json';\r\nimport './HomePageGrid.css'\r\n\r\nfunction HomePageGrid() {\r\n     const defaultProps = {\r\n         className: \"layout\",\r\n         isDraggable: false,\r\n    };\r\n\r\n    function generateDOM() {\r\n        const layout = generateLayout();\r\n        return _.map(_.range(sampleData.length), function (i) {\r\n            return (\r\n                    <div key={i} data-grid={layout[i]} data-testid={i.toString()}>\r\n                        <NavLink to={`/show/${sampleData[i].id}`}>\r\n                            <img alt={sampleData[i].show.name + \" cover image\"} src={sampleData[i].show.image?.medium} />\r\n                        </NavLink>\r\n                        <div className=\"text\">Rating:{sampleData[i].show.rating.average ? sampleData[i].show.rating.average + \"/10\" : \"0/10\" }</div>\r\n                        <div className=\"text\">{sampleData[i].show.name}</div>\r\n                    </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    function generateLayout() {\r\n        const p = defaultProps;\r\n        return _.map(sampleData, function (item, i) {\r\n            let y : number = _.result(p, \"y\") || Math.ceil(Math.random() * 4) + 1;\r\n            return {\r\n                x: (i * 2) % 12,\r\n                y: Math.floor(i / 6) * y,\r\n                w: 2,\r\n                h: 2,\r\n                i: i.toString()\r\n            };\r\n        });\r\n    }\r\n\r\n    const ResponsiveGridLayout = WidthProvider(Responsive);\r\n    return (\r\n        <div className=\"HomePageGrid\">\r\n            <h1>Last Added Shows</h1>\r\n            <ResponsiveGridLayout {...defaultProps}>\r\n                {generateDOM()}\r\n            </ResponsiveGridLayout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePageGrid;","import { useParams } from 'react-router-dom'; \r\nimport ExampleData from './exampleData.json';\r\n\r\nexport interface ShowInfo{\r\n    StreamedOn: string;\r\n    Schedule: string;\r\n    Status: string;\r\n    Genres: string[];\r\n}\r\n\r\nexport interface Actor{\r\n    CharactorName: string;\r\n    ActorName: string;\r\n    ProfileLink: string;\r\n}\r\n\r\nexport interface ShowPageDetailProps{\r\n    Title: string;\r\n    Description: string;\r\n    OverviewPictureSrc: string;\r\n    Rating: number;\r\n    ShowInfo: ShowInfo;\r\n    Starring: Actor[];\r\n}\r\n\r\ninterface ShowPageProps{\r\n    showId:string\r\n}\r\n\r\nfunction ShowPage(){\r\nconst params = useParams<ShowPageProps>();\r\n\r\nconst thisMorningData = ExampleData.find((exampleData)=> exampleData.id === parseInt(params.showId));\r\nif(!thisMorningData)\r\nreturn(\r\n    <div>no data found</div>\r\n)\r\n\r\n\r\nconst showPageDetailProps: ShowPageDetailProps = {\r\n    Title: thisMorningData.show.name,\r\n    Description: thisMorningData.show.summary ?? \"\",\r\n    Rating: thisMorningData.show.rating.average ?? 0,\r\n    OverviewPictureSrc: thisMorningData.show.image?.medium ?? \"\",\r\n    ShowInfo: {\r\n        Genres: thisMorningData.show.genres,\r\n        Schedule: thisMorningData.show.schedule.days.join(\", \"),\r\n        Status: thisMorningData.show.status,\r\n        StreamedOn: thisMorningData.show.network?.name ?? \"\"\r\n    },\r\n    Starring: [\r\n        {\r\n            ActorName:\"Test\",\r\n            CharactorName:\"Test\",\r\n            ProfileLink:\"\"\r\n        }\r\n    ]\r\n\r\n};\r\n\r\n    return (\r\n        <ShowPageDetail {...showPageDetailProps} />\r\n    );\r\n}\r\n\r\nfunction ShowPageDetail(showPageDetailProps: ShowPageDetailProps) {\r\n    return (\r\n        <div className=\"ShowPage container\">\r\n            \r\n                <img alt={showPageDetailProps.Title + \" cover image\"} src={showPageDetailProps.OverviewPictureSrc} />\r\n                    \r\n            \r\n            \r\n            <div className=\"row\">\r\n                <div id=\"title\" className=\"md-12\"><h1>Title</h1>\r\n                    <p>{showPageDetailProps.Title}</p></div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div id=\"show-info\" className=\"md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"md-12\">\r\n                            <h2>Show Info</h2>\r\n                        </div>                        \r\n                    </div>                    \r\n                    <div className=\"row\">\r\n                        <div className=\"md-12\">\r\n                            <span>Streamed On {showPageDetailProps.ShowInfo.StreamedOn}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"md-12\">\r\n                            <span>Schedule {showPageDetailProps.ShowInfo.Schedule}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"md-12\">\r\n                            <span>Status {showPageDetailProps.ShowInfo.Status}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"md-12\">\r\n                            <span>Genres {showPageDetailProps.ShowInfo.Genres.join(\", \")}</span>\r\n                        </div>\r\n                    </div>                    \r\n                </div>\r\n                <div id=\"starring\" className=\"md-6\">\r\n                    <h2>Starring</h2>\r\n                    {\r\n                        showPageDetailProps.Starring.map(actor=> (\r\n                            <div key={actor.CharactorName} className=\"row\">\r\n                                <div className=\"md-12\">\r\n                                    <span><img src={actor.ProfileLink} alt=\"Profile Picture\" /> </span>\r\n                                    <span>{actor.ActorName}</span>\r\n                                    <span>{actor.CharactorName}</span>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowPage;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport HomePageGrid from './HomePageGrid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport ShowPage from './ShowPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n<div className=\"App\">\r\n              <header className=\"App-header\">\r\n                <Link to=\"/\"><p id=\"Title\">\r\n                  What's on - your TV guide for the 21st century\r\n        </p>\r\n        </Link>\r\n              </header>\r\n              <p id=\"TagLine\">\r\n                TV Show and web series database. Create personalised schedules. Episode guide, cast, crew and character information.\r\n        </p>\r\n        </div>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            \r\n              <HomePageGrid />\r\n            \r\n          </Route>\r\n          <Route exact path=\"/whats-on\">\r\n            \r\n              <HomePageGrid />\r\n            \r\n          </Route>\r\n          <Route path=\"/show/:showId\" component={ShowPage} />\r\n           <Route>\r\n              <div> 404</div>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './react-grid-layout/styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}