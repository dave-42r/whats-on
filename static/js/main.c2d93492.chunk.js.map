{"version":3,"sources":["HomePageGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomePageGrid","defaultProps","className","isDraggable","ResponsiveGridLayout","WidthProvider","Responsive","layout","p","_","map","sampleData","item","i","w","result","Math","ceil","random","y","x","floor","h","toString","generateLayout","range","length","alt","show","name","src","image","medium","rating","average","generateDOM","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6l/FAkDeA,MA7Cf,WACK,IAAMC,EAAe,CACjBC,UAAW,SACXC,aAAa,GA+BZC,EAAuBC,wBAAcC,cAC3C,OACI,sBAAKJ,UAAU,eAAf,UACI,kDACA,cAACE,EAAD,2BAA0BH,GAA1B,aAhCR,WACI,IAAMM,EAYV,WACI,IAAMC,EAAIP,EACV,OAAOQ,IAAEC,IAAIC,GAAY,SAAUC,EAAMC,GACrC,IAAIC,EAAaL,IAAEM,OAAOP,EAAG,MAAQQ,KAAKC,KAAqB,EAAhBD,KAAKE,UAChDC,EAAaV,IAAEM,OAAOP,EAAG,MAAQQ,KAAKC,KAAqB,EAAhBD,KAAKE,UAAgB,EACpE,MAAO,CACHE,EAAQ,EAAJP,EAAS,GACbM,EAAGH,KAAKK,MAAMR,EAAI,GAAKM,EACvBL,EAAGA,EACHQ,EAAGH,EACHN,EAAGA,EAAEU,eAtBEC,GACf,OAAOf,IAAEC,IAAID,IAAEgB,MAAMd,EAAWe,SAAS,SAAUb,GAAI,IAAD,EAClD,OACI,sBAAa,YAAWN,EAAOM,GAAI,cAAaA,EAAEU,WAAlD,UACI,qBAAKI,IAAKhB,EAAWE,GAAGe,KAAKC,KAAO,eAAgBC,IAAG,UAAEnB,EAAWE,GAAGe,KAAKG,aAArB,aAAE,EAA0BC,SACnF,sBAAK9B,UAAU,OAAf,oBAA8BS,EAAWE,GAAGe,KAAKK,OAAOC,QAAUvB,EAAWE,GAAGe,KAAKK,OAAOC,QAAU,MAAQ,UAC9G,qBAAKhC,UAAU,OAAf,SAAuBS,EAAWE,GAAGe,KAAKC,SAHpChB,MA6BTsB,UCvBFC,MAhBf,WACE,OACE,sBAAKlC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,mBAAGmC,GAAG,QAAN,8DAIF,mBAAGA,GAAG,UAAN,kIAGA,cAAC,EAAD,QCFSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2d93492.chunk.js","sourcesContent":["import { defaultMaxListeners } from 'events';\r\nimport _ from \"lodash\";\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport sampleData from './exampleData.json';\r\n\r\nfunction HomePageGrid() {\r\n     const defaultProps = {\r\n         className: \"layout\",\r\n         isDraggable: false,\r\n    };\r\n\r\n    function generateDOM() {\r\n        const layout = generateLayout();\r\n        return _.map(_.range(sampleData.length), function (i) {\r\n            return (\r\n                <div key={i} data-grid={layout[i]} data-testid={i.toString()}>\r\n                    <img alt={sampleData[i].show.name + \" cover image\"} src={sampleData[i].show.image?.medium} />\r\n                    <div className=\"text\">Rating:{sampleData[i].show.rating.average ? sampleData[i].show.rating.average + \"/10\" : \"0/10\" }</div>\r\n                    <div className=\"text\">{sampleData[i].show.name}</div>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n\r\n    function generateLayout() {\r\n        const p = defaultProps;\r\n        return _.map(sampleData, function (item, i) {\r\n            let w : number = _.result(p, \"w\") || Math.ceil(Math.random() * 4);\r\n            let y : number = _.result(p, \"y\") || Math.ceil(Math.random() * 4) + 1;\r\n            return {\r\n                x: (i * 2) % 12,\r\n                y: Math.floor(i / 6) * y,\r\n                w: w,\r\n                h: y,\r\n                i: i.toString()\r\n            };\r\n        });\r\n    }\r\n\r\n    const ResponsiveGridLayout = WidthProvider(Responsive);\r\n    return (\r\n        <div className=\"HomePageGrid\">\r\n            <h1>Last Added Shows</h1>\r\n            <ResponsiveGridLayout {...defaultProps}>\r\n                {generateDOM()}\r\n            </ResponsiveGridLayout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePageGrid;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePageGrid from './HomePageGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p id=\"Title\">\n          What's on - your TV guide for the 21st century\n        </p>\n      </header>\n      <p id=\"TagLine\">\n        TV Show and web series database. Create personalised schedules. Episode guide, cast, crew and character information.\n        </p>\n      <HomePageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './react-grid-layout/styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}